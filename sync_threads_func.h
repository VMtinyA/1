#ifndef THREADS_FUNC_H
#define THREADS_FUNC_H

#include <pthread.h>
#include <semaphore.h>
#include <errno.h>
#include <sched.h>
#include <stdio.h>
#include <stdlib.h>

//****************************************************************************************************************
/* Константы */

#define Frequency0          1000
#define Frequency1          200
#define Frequency2          500

#define SYNCTHREADSNUM          3      // макс. число используемых потоков
#define MAXPRIORITY_FIFO         99     // макс. приоритет для стратегии планирования FIFO

//******************************************************************************
/* Параметры потоков и глобальные переменные */

/* параметры потоков управления */
typedef struct {
       unsigned short isComplete;       // флаг для проверки завершения потока
       int priority;                // значение приоритета (1 - 99)
       //struct data;          // структура для данных, передаваемых в реальную функцию потока
} THREAD_ARG;

/* глобальные переменные */
sem_t sem_SI2; // семафор для прерывания по СИ2 (выдает обработчик прерывания)

//****************************************************************************
/* Прототипы функций */

/* Функции дочерних потоков */
// служат "обертками" для вызова реальных функций
static void *func0 (void *param);
static void *func1 (void *param);
static void *func2 (void *param);

// функция-диспетчер циклических потоков
// при вызове должна создать все потоки и управлять ими
static void *thread_manager (void *param);

// функция должна создать поток - диспетчер для управления синхронными потоками f0, f1, f2
// эта функция вводится для "инкапсуляции" всего, что принадлежит синхронным потокам, в данном модуле
// должна вызываться в main основной программы
void sync_threads_start (void);


#endif // THREADS_FUNC_H
